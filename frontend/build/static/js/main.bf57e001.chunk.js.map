{"version":3,"sources":["components/Recipe.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","state","loading","recipes","prevProps","prevState","this","props","user_ingredients","length","console","log","requestOptions","method","headers","body","JSON","stringify","ingredientName","fetch","response","json","data","setState","class","map","recipe","key","shortid","generate","href","url","target","src","img","title","React","Component","Search","makeStyles","theme","root","width","marginTop","spacing","align","Autocomplete","multiple","id","options","validIngredients","getOptionLabel","option","filterSelectedOptions","onChange","updateIngredients","renderInput","params","TextField","variant","label","placeholder","fullWidth","App","e","v","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"owBAIqBA,G,iNACnBC,MAAQ,CACNC,SAAS,EACTC,QAAS,I,2HAGcC,EAAWC,G,gFAEhCC,KAAKC,MAAMC,iBAAiBC,SAC1BL,EAAUI,iBAAiBC,QAC7BH,KAAKC,MAAMC,iBAAiBC,OAAS,G,wBAErCC,QAAQC,IAAIL,KAAKC,MAAMC,kBACjBI,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACnBC,eAAgBZ,KAAKC,MAAMC,oBAInB,yD,SACWW,MADX,yDACsBP,G,cAA5BQ,E,gBACaA,EAASC,O,OAAtBC,E,OACNZ,QAAQC,IAAIW,GACZhB,KAAKiB,SAAS,CACZpB,QAASmB,EACTpB,SAAS,I,wBAGXI,KAAKC,MAAMC,iBAAiBC,SAC1BL,EAAUI,iBAAiBC,QACU,IAAvCH,KAAKC,MAAMC,iBAAiBC,QAE5BH,KAAKiB,SAAS,CAAErB,SAAS,I,yIAK3B,OAAII,KAAKL,MAAMC,QACN,8BAGJI,KAAKL,MAAME,QAKd,yBAAKqB,MAAM,cACRlB,KAAKL,MAAME,QAAQsB,KAAI,SAAAC,GAAM,OAC5B,yBAAKF,MAAM,OAAOG,IAAKC,IAAQC,YAC7B,uBAAGC,KAAMJ,EAAOK,IAAKC,OAAO,UAC1B,yBAAKC,IAAKP,EAAOQ,OAEnB,2BAAIR,EAAOS,YAVV,sD,GA5CuBC,IAAMC,Y,mCCuC3BC,E,iLAlCOC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,MAAO,IACP,YAAa,CACXC,UAAWH,EAAMI,QAAQ,IAE3BC,MAAO,cAIX,OACE,yBAAKrB,MAAM,UACT,kBAACsB,EAAA,EAAD,CACEC,UAAQ,EACRC,GAAG,gBACHC,QAASC,EACTC,eAAgB,SAAAC,GAAM,OAAIA,EAAOjB,OACjCkB,uBAAqB,EACrBC,SAAUhD,KAAKC,MAAMgD,kBACrBC,YAAa,SAAAC,GAAM,OACjB,kBAACC,EAAA,EAAD,iBACMD,EADN,CAEEE,QAAQ,WACRC,MAAM,oBACNC,YAAY,sBACZC,WAAS,a,GA3BF1B,IAAMC,WCmBZ0B,E,2MApBb9D,MAAQ,CACNO,iBAAkB,I,EAGpB+C,kBAAoB,SAACS,EAAGC,GACtB,EAAK1C,SAAS,CACZf,iBAAkByD,K,wEAKpB,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAQX,kBAAmBjD,KAAKiD,oBAChC,kBAAC,EAAD,CAAQ/C,iBAAkBF,KAAKL,MAAMO,wB,GAf3B6B,aCOE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzE,QAAQyE,MAAMA,EAAMC,c","file":"static/js/main.bf57e001.chunk.js","sourcesContent":["import React from \"react\";\nimport shortid from \"shortid\";\nimport \"../basic-grid.css\";\n\nexport default class Recipe extends React.Component {\n  state = {\n    loading: true,\n    recipes: []\n  };\n\n  async componentDidUpdate(prevProps, prevState) {\n    if (\n      this.props.user_ingredients.length !==\n        prevProps.user_ingredients.length &&\n      this.props.user_ingredients.length > 0\n    ) {\n      console.log(this.props.user_ingredients);\n      const requestOptions = {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          ingredientName: this.props.user_ingredients\n        })\n      };\n      //const url = \"http://localhost:8080/recipes\";\n      const url = \"https://recipesearchenginedesign.herokuapp.com/recipes\";\n      const response = await fetch(url, requestOptions);\n      const data = await response.json();\n      console.log(data);\n      this.setState({\n        recipes: data,\n        loading: false\n      });\n    } else if (\n      this.props.user_ingredients.length !==\n        prevProps.user_ingredients.length &&\n      this.props.user_ingredients.length === 0\n    ) {\n      this.setState({ loading: true });\n    }\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <div></div>;\n    }\n\n    if (!this.state.recipes) {\n      return <div>didn't get a post</div>;\n    }\n\n    return (\n      <div class=\"basic-grid\">\n        {this.state.recipes.map(recipe => (\n          <div class=\"card\" key={shortid.generate()}>\n            <a href={recipe.url} target=\"_blank\">\n              <img src={recipe.img} />\n            </a>\n            <p>{recipe.title}</p>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport validIngredients from \"./validIngredients.json\";\nimport \"../basic-grid.css\";\n\nclass Search extends React.Component {\n  render() {\n    const useStyles = makeStyles(theme => ({\n      root: {\n        width: 1000,\n        \"& > * + *\": {\n          marginTop: theme.spacing(3)\n        },\n        align: \"center\"\n      }\n    }));\n\n    return (\n      <div class=\"search\">\n        <Autocomplete\n          multiple\n          id=\"tags-outlined\"\n          options={validIngredients}\n          getOptionLabel={option => option.title}\n          filterSelectedOptions\n          onChange={this.props.updateIngredients}\n          renderInput={params => (\n            <TextField\n              {...params}\n              variant=\"outlined\"\n              label=\"Ingredient Search\"\n              placeholder=\"Enter an Ingredient\"\n              fullWidth\n            />\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Recipe from \"./components/Recipe\";\nimport Search from \"./components/Search\";\n\nclass App extends Component {\n  state = {\n    user_ingredients: []\n  };\n\n  updateIngredients = (e, v) => {\n    this.setState({\n      user_ingredients: v\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Search updateIngredients={this.updateIngredients} />\n        <Recipe user_ingredients={this.state.user_ingredients} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n//sdf\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}